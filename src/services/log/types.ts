export interface IAddLogReq {
  id?: string;
  companyId?: string;
  facilityId?: string;
  chillerId?: string;
  userId?: string;
  updatedBy?: string;
  readingDate?: string;
  readingTime?: string;
  readingTimeZone?: string;
  readingDateUTC?: string;
  condInletTemp?: number;
  condOutletTemp?: number;
  condRefrigTemp?: number;
  condPressure?: number;
  condAPDrop?: number;
  evapInletTemp?: number;
  evapOutletTemp?: number;
  evapRefrigTemp?: number;
  evapPressure?: number;
  evapAPDrop?: number;
  ampsPhase1?: number;
  ampsPhase2?: number;
  ampsPhase3?: number;
  voltsPhase1?: number;
  voltsPhase2?: number;
  voltsPhase3?: number;
  oilPresHigh?: number;
  oilPresLow?: number;
  oilPresDif?: number;
  oilSumpTemp?: number;
  oilLevel?: number;
  bearingTemp?: number;
  runHours?: number;
  comp1RunHours?: number;
  comp2RunHours?: number;
  lastRunHours?: number;
  lastRunHoursReadingDate?: number;
  nextRunHours?: number;
  nextRunHoursReadingDate?: number;
  purgeTimeHr?: number;
  purgeTimeMin?: number;
  userNote?: string;
  airTemp?: number;
  runHourStart?: boolean;
  comp1RunHourStart?: boolean;
  comp2RunHourStart?: boolean;
}

export interface IViewLogRes {
  id?: string;
  companyId?: string;
  facilityId?: string;
  chillerId?: string;
  userId?: string;
  userProfileImage?: string;
  updatedBy?: string;
  ChillerNo?: string;
  readingDate?: string;
  readingTime?: string;
  effLoss?: { type: string; value: number; problem?: ILogProblemRes[] };
  condAppLoss?: { type: string; value: number; problem?: ILogProblemRes[] };
  evapAppLoss?: { type: string; value: number; problem?: ILogProblemRes[] };
  nonCondLoss?: { type: string; value: number; problem?: ILogProblemRes[] };
  otherLoss?: { type: string; value: number; problem?: ILogProblemRes[] };
  readingTimeZone?: string;
  readingDateUTC?: string;
  condInletTemp?: number;
  condOutletTemp?: number;
  condRefrigTemp?: number;
  condPressure?: number;
  condAPDrop?: number;
  evapInletTemp?: number;
  evapOutletTemp?: number;
  evapRefrigTemp?: number;
  evapPressure?: number;
  evapAPDrop?: number;
  ampsPhase1?: number;
  ampsPhase2?: number;
  ampsPhase3?: number;
  voltsPhase1?: number;
  voltsPhase2?: number;
  voltsPhase3?: number;
  oilPresHigh?: number;
  oilPresLow?: number;
  oilPresDif?: number;
  oilSumpTemp?: number;
  oilLevel?: number;
  bearingTemp?: number;
  runHours?: number;
  comp1RunHours?: number;
  comp2RunHours?: number;
  lastRunHours?: number;
  lastRunHoursReadingDate?: number;
  nextRunHours?: number;
  nextRunHoursReadingDate?: number;
  purgeTimeHr?: number;
  purgeTimeMin?: number;
  userNote?: string;
  airTemp?: number;
  runHourStart?: boolean;
  comp1RunHourStart?: boolean;
  comp2RunHourStart?: boolean;
  _id: string;
  targetCost: number;
  actualCost: number;
  lossCost: number;
  totalLoss: number;
  condInletLoss: number;
  condInletLossCost: number;
  EFLCondAppLoss: number;
  condApproach: number;
  condAppLossCost: number;
  evapTempLoss: number;
  evapTempLossCost: number;
  EFLEvapAppLoss: number;
  evapAppLossCost: number;
  nonCondLossCost: number;
  deltaLoss: number;
  deltaLossCost: number;
  condFlow: number;
  evapFlow: number;
  energyCost: number;
  ampImbalance: number;
  voltImbalance: number;
  actualLoad: number;
  finalOilDiff: number;
  condAppVariance: number;
  nonCondensables: number;
  calculatedEvapRefrigTemp: number;
  evapAppVariance: number;
  evapApproach: number;
  altitudeCorrection: number;
  validRunHours: boolean;
  KWHLoss: number;
  BTULoss: number;
  CO2: number;
  isDeleted: boolean;
  createdAt: string;
  updatedAt: string;
  chillerName: string;
  facilityName: string;
  companyName: string;
  userName: any;
  userFirstName?: string;
  userLastName?: string;
  nextLogId?: string;
  prevLogId?: string;
}

export interface ILogProblemRes {
  _id: string;
  section: string;
  field: string;
  problem: string;
  solution: string;
  __v: number;
  createdAt: string;
  updatedAt: string;
  updated_by: string;
  updated_by_profile: string;
}

export interface ILogListRes {
  logList: IViewLogRes[];
  totalRecords: number;
}
